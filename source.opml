<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Thu, 18 May 2023 14:47:02 GMT -->

<!-- 
   Hi this is Dave Winer. I write all my project code in an outliner, which 
   generates all the files that make up this GitHub project. You'll see a 
   source.opml file like this in each of my projects. It contains the outline 
   source that the repo files were generated from. This is the most logical place 
   to store them. You can read the code in any outliner that supports OPML, which 
   includes http://drummer.scripting.com. You can use the Open URL command in 
   Drummer's File menu to open the "raw" version of this file straight from the 
   GitHub repo.
 -->

<opml version="2.0">
	<head>
		<title>nodeEditor: feedRead</title>
		<dateCreated>Sat, 31 Mar 2018 14:44:58 GMT</dateCreated>
		<dateModified>Thu, 18 May 2023 14:47:02 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 16</expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>186</windowTop>
		<windowLeft>532</windowLeft>
		<windowBottom>843</windowBottom>
		<windowRight>1694</windowRight>
		</head>
	<body>
		<outline text="/scripting.com/code/feedread/">
			<outline text="worknotes.md">
				<outline text="#### 5/18/23 by DW" created="Thu, 18 May 2023 14:08:27 GMT">
					<outline text="Feeds with no items that have &lt;cloud&gt; elements are not getting them through the 9/29/22 workaround." created="Thu, 18 May 2023 14:08:38 GMT"/>
					<outline text="Added code to workWithNoItemsFeed to fix this. The issue was that cloud elements can have attributes, the others don't." created="Thu, 18 May 2023 14:09:06 GMT"/>
					</outline>
				<outline text="#### 9/29/22 by DW" created="Thu, 29 Sep 2022 16:00:03 GMT">
					<outline text="If a feed has no items, feedread returns nothing. This is because feedparser sends back head info in each item. If there are no items, we have to head info. So I built a very simple little parser that handles this case." created="Thu, 29 Sep 2022 16:00:11 GMT"/>
					</outline>
				<outline text="#### 1/30/19 by DW">
					<outline text="Added code to parseFeedString to be sure the callback is only called once.  "/>
					</outline>
				<outline text="#### 1/26/19 by DW">
					<outline text="Wired off console.log calls. This level should be reporting the errors, not logging them. "/>
					</outline>
				</outline>
			<outline text="package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;davefeedread&quot;, "/>
					<outline text="&quot;description&quot;: &quot;Read a feed and call back with a JavaScript structure.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@scripting.com&gt;&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.5.24&quot;, "/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;request&quot;: &quot;*&quot;,"/>
						<outline text="&quot;iconv-lite&quot;: &quot;*&quot;,"/>
						<outline text="&quot;xml2js&quot;: &quot;*&quot;," created="Wed, 30 Jun 2021 13:10:12 GMT"/>
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davehttp&quot;: &quot;*&quot;,"/>
						<outline text="&quot;feedparser&quot;: &quot;*&quot;"/>
						<outline text="}, "/>
						</outline>
					<outline text="&quot;files&quot;: [">
						<outline text="&quot;feedread.js&quot;"/>
						<outline text="],"/>
						</outline>
					<outline text="&quot;main&quot;: &quot;feedread.js&quot;,"/>
					<outline text="&quot;repository&quot;: {">
						<outline text="&quot;type&quot;: &quot;git&quot;,"/>
						<outline text="&quot;url&quot;: &quot;https://github.com/scripting/feedread.git&quot;"/>
						<outline text="},"/>
						</outline>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;engines&quot;: {">
						<outline text="&quot;node&quot;: &quot;*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="feedread.js">
				<outline text="var myProductName = &quot;davefeedread&quot;; myVersion = &quot;0.5.24&quot;;   "/>
				<outline text=""/>
				<outline text="/*  The MIT License (MIT)">
					<outline text="Copyright (c) 2014-2022 Dave Winer"/>
					<outline text=""/>
					<outline text="Permission is hereby granted, free of charge, to any person obtaining a copy"/>
					<outline text="of this software and associated documentation files (the &quot;Software&quot;), to deal"/>
					<outline text="in the Software without restriction, including without limitation the rights"/>
					<outline text="to use, copy, modify, merge, publish, distribute, sublicense, and/or sell"/>
					<outline text="copies of the Software, and to permit persons to whom the Software is"/>
					<outline text="furnished to do so, subject to the following conditions:"/>
					<outline text=""/>
					<outline text="The above copyright notice and this permission notice shall be included in all"/>
					<outline text="copies or substantial portions of the Software."/>
					<outline text=""/>
					<outline text="THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR"/>
					<outline text="IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,"/>
					<outline text="FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE"/>
					<outline text="AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER"/>
					<outline text="LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,"/>
					<outline text="OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE"/>
					<outline text="SOFTWARE."/>
					<outline text="*/"/>
					</outline>
				<outline text="" isComment="true"/>
				<outline text="Notes" isComment="true">
					<outline text="11/27/19; 10:44:16 AM by DW">
						<outline text="In feedbase, we'd get lots of errors when theFeed is undefined in checkForNoneLengthEnclosures. Added defensive driving. "/>
						</outline>
					<outline text="5/14/19; 11:37:45 AM by DW">
						<outline text="Handle enclosure lengths of &quot;None&quot;."/>
						</outline>
					<outline text="4/30/19; 8:48:50 AM by DW">
						<outline text="Adding support for rssCloud. New entrypoint -- startCloud."/>
						</outline>
					<outline text="4/18/18; 11:06:26 AM by DW">
						<outline text="People are having a trouble installing iconv because it needs to run something that it downloads, and the machines protect against that. So lets see if iconv-lite will help here."/>
						</outline>
					<outline text="4/17/18; 11:49:14 AM by DW">
						<outline text="If there's an error parsing the feed, we weren't returning the error from parseFeedUrl. so feedbase would think the feed is okay, even if for example, the server returned an error page in HTML. Fixed."/>
						</outline>
					<outline text="3/30/18; 12:04:40 PM by DW">
						<outline text="Basic idea. I love feedParser, but it's too much work to just throw it into an app. I want a single call that takes a URL and returns a JavaScript object with the prsed version of the feed. All the work done behind the scenes. "/>
						</outline>
					</outline>
				<outline text=""/>
				<outline text="exports.parseString = parseFeedString;"/>
				<outline text="exports.parseUrl = parseFeedUrl;"/>
				<outline text="exports.getCharset = getCharset;"/>
				<outline text="exports.startCloud = startCloud; //4/30/19 by DW"/>
				<outline text=""/>
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="const feedParser = require (&quot;feedparser&quot;);"/>
				<outline text="const request = require (&quot;request&quot;);"/>
				<outline text="const stream = require (&quot;stream&quot;);"/>
				<outline text="const Iconv = require (&quot;iconv&quot;).Iconv;" isComment="true"/>
				<outline text="const iconv = require (&quot;iconv-lite&quot;);"/>
				<outline text="const qs = require (&quot;querystring&quot;);"/>
				<outline text="const davehttp = require (&quot;davehttp&quot;); "/>
				<outline text="const xml2js = require (&quot;xml2js&quot;); //9/29/22 by DW"/>
				<outline text=""/>
				<outline text="const metaNames = { ">
					<outline text="title: true,"/>
					<outline text="link: true,"/>
					<outline text="description: true,"/>
					<outline text="pubDate: true,"/>
					<outline text="language: true,"/>
					<outline text="copyright: true,"/>
					<outline text="generator: true,"/>
					<outline text="cloud: true,"/>
					<outline text="image: true,"/>
					<outline text="categories: true,"/>
					<outline text="&quot;atom:link&quot;: true //6/14/22 by DW" created="Tue, 14 Jun 2022 16:11:40 GMT"/>
					<outline text="};"/>
					</outline>
				<outline text=""/>
				<outline text="//rssCloud support -- 4/30/19 by DW">
					<outline text="var cloudConfig = { ">
						<outline text="flPingEnabled: false, //if true, we set up a server to receive pings from the cloud server"/>
						<outline text="port: 1414, //the port the ping receiver runs on"/>
						<outline text="path: &quot;/feedping&quot;, //the message we ask the ping server to send us"/>
						<outline text="timeOutSecs: 30,"/>
						<outline text="feedUpdatedCallback: function (feedUrl, callback) {">
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="var cloudFeeds = new Object (); "/>
					<outline text=""/>
					<outline text="function pleaseNotify (feedUrl, theCloud, callback) {">
						<outline text="var urlCloudServer = &quot;http://&quot; + theCloud.domain + &quot;:&quot; + theCloud.port + theCloud.path;"/>
						<outline text="var now = new Date ();"/>
						<outline text="var theRequest = {">
							<outline text="url: urlCloudServer,"/>
							<outline text="followRedirect: true, "/>
							<outline text="headers: {Accept: &quot;application/json&quot;},"/>
							<outline text="method: &quot;POST&quot;,"/>
							<outline text="form: {">
								<outline text="port: cloudConfig.port,"/>
								<outline text="path: cloudConfig.path,"/>
								<outline text="url1: feedUrl,"/>
								<outline text="protocol: &quot;http-post&quot;"/>
								<outline text="}"/>
								</outline>
							<outline text="};"/>
							</outline>
						<outline text="console.log (&quot;pleaseNotify: theRequest == &quot; + utils.jsonStringify (theRequest));" isComment="true"/>
						<outline text="request (theRequest, function (err, response, body) {">
							<outline text="if (err) {">
								<outline text="console.log (&quot;pleaseNotify: err.message == &quot; + err.message);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="console.log (&quot;pleaseNotify: response == &quot; + utils.jsonStringify (response));"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function checkForCloud (feedUrl, theFeed) { //4/30/19 by DW">
						<outline text="if (cloudConfig.flPingEnabled) {">
							<outline text="if (theFeed.head.cloud !== undefined) {">
								<outline text="if (cloudFeeds [feedUrl] === undefined) { //haven't registered with cloud server for this feed">
									<outline text="pleaseNotify (feedUrl, theFeed.head.cloud);"/>
									<outline text="cloudFeeds [feedUrl] = new Date ();"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function startCloud (options, callback) { //4/30/19 by DW">
						<outline text="Changes" isComment="true">
							<outline text="4/30/19; 8:50:21 AM by DW">
								<outline text="options allows you to override any of the values in cloudConfig."/>
								</outline>
							</outline>
						<outline text="function everyHour () {">
							<outline text="cloudFeeds = new Object (); //re-request notification every hour"/>
							<outline text="}"/>
							</outline>
						<outline text="function startServer (callback) {">
							<outline text="var httpconfig = {">
								<outline text="port: cloudConfig.port,"/>
								<outline text="flPostEnabled: true,"/>
								<outline text="flLogToConsole: true"/>
								<outline text="};"/>
								</outline>
							<outline text="davehttp.start (httpconfig, function (theRequest) {">
								<outline text="console.log (&quot;davehttp.start: theRequest.lowerpath == &quot; + theRequest.lowerpath + &quot;, theRequest.method == &quot; + theRequest.method);" isComment="true"/>
								<outline text="if (theRequest.lowerpath == cloudConfig.path) {">
									<outline text="var jstruct = qs.parse (theRequest.postBody);"/>
									<outline text="console.log (theRequest.lowerpath + &quot; -- jstruct.url == &quot; + jstruct.url);" isComment="true"/>
									<outline text="cloudConfig.feedUpdatedCallback (jstruct.url, function (err, data) {">
										<outline text="if (err) {">
											<outline text="theRequest.httpReturn (500, &quot;text/plain&quot;, err.message);"/>
											<outline text="}"/>
											</outline>
										<outline text="else {">
											<outline text="if (data) {">
												<outline text="theRequest.httpReturn (200, &quot;application/json&quot;, utils.jsonStringify (data));"/>
												<outline text="}"/>
												</outline>
											<outline text="else {">
												<outline text="theRequest.httpReturn (200, &quot;text/plain&quot;, &quot;Thanks for the update! ;-)&quot;);"/>
												<outline text="}"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="theRequest.httpReturn (404, &quot;text/plain&quot;, &quot;Not found.&quot;);"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="if (options !== undefined) {">
							<outline text="for (var x in options) {">
								<outline text="cloudConfig [x] = options [x];"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="cloudConfig.flPingEnabled = true;"/>
						<outline text=""/>
						<outline text="console.log (&quot;startCloud: options == &quot; + utils.jsonStringify (options));"/>
						<outline text=""/>
						<outline text="startServer (callback);"/>
						<outline text="setInterval (everyHour, 60 * 60 * 1000); "/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text=""/>
				<outline text="function getCharset (httpResponse) {">
					<outline text="var contentType = httpResponse.headers [&quot;content-type&quot;];"/>
					<outline text="if (contentType !== undefined) {">
						<outline text="var encoding = utils.trimWhitespace (utils.stringNthField (contentType, &quot;;&quot;, 2));"/>
						<outline text="if (encoding.length &gt; 0) {">
							<outline text="var charset = utils.trimWhitespace (utils.stringNthField (encoding, &quot;=&quot;, 2));"/>
							<outline text="console.log (&quot;getCharset: charset == &quot; + charset);" isComment="true"/>
							<outline text="return (charset);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="return (undefined); //no charset specified"/>
					<outline text="}"/>
					</outline>
				<outline text="function checkForNoneLengthEnclosures (theFeed) { //5/14/19 by DW">
					<outline text="//feedparser under some circumstances will return a length for an enclosure of &quot;None&quot;. ">
						<outline text="//this is not what my apps were expecting and as a result we missed a bunch of podcasts due to errors."/>
						<outline text="//zero is much easier to handle, and there really is no correct value if the length is omitted, since it is required by RSS 2.0."/>
						<outline text="//but what can you do -- this is the real world, and this happens. examples -- Radio Lab, Here's the Thing."/>
						</outline>
					<outline text="if (theFeed !== undefined) { //11/27/19 by DW -- this happens in feedbase">
						<outline text="theFeed.items.forEach (function (item) {">
							<outline text="if (item.enclosures !== undefined) {">
								<outline text="item.enclosures.forEach (function (enc) {">
									<outline text="if (enc.length == &quot;None&quot;) {">
										<outline text="enc.length = 0;"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="" created="Thu, 29 Sep 2022 16:04:52 GMT"/>
				<outline text="function workWithNoItemsFeed (xmltext, callback) {" created="Thu, 29 Sep 2022 16:04:52 GMT">
					<outline text="Changes" isComment="true" created="Thu, 29 Sep 2022 16:05:17 GMT">
						<outline text="5/18/23; 10:39:31 AM by DW" created="Thu, 18 May 2023 14:39:31 GMT">
							<outline text="If there's an object whose name is $, move all its properties up to the same level as the $." created="Thu, 18 May 2023 14:39:31 GMT"/>
							<outline text="this is for cloud elements, who come through to us like this:" created="Thu, 18 May 2023 14:39:59 GMT">
								<outline text="&quot;cloud&quot;: {">
									<outline text="&quot;$&quot;: {">
										<outline text="&quot;domain&quot;: &quot;firesky-prod.sw.workers.dev&quot;,"/>
										<outline text="&quot;port&quot;: &quot;80&quot;,"/>
										<outline text="&quot;path&quot;: &quot;/rss-cloud-notify&quot;,"/>
										<outline text="&quot;registerProcedure&quot;: &quot;&quot;,"/>
										<outline text="&quot;protocol&quot;: &quot;http-post&quot;"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								</outline>
							</outline>
						<outline text="10/2/22; 7:48:00 AM by DW" created="Sun, 02 Oct 2022 11:48:00 GMT">
							<outline text="In getChannelValue, if there is no rss property of jstruct, we'd get an error parsing some feeds, so we catch it in a try and return undefined for such values. " created="Sun, 02 Oct 2022 11:48:01 GMT"/>
							</outline>
						<outline text="9/29/22; 12:05:20 PM by DW" created="Thu, 29 Sep 2022 16:05:19 GMT">
							<outline text="There are no items in the feed. So we parse the XML text to get the head info. " created="Thu, 29 Sep 2022 16:05:21 GMT"/>
							</outline>
						</outline>
					<outline text="let options = {">
						<outline text="explicitArray: false"/>
						<outline text="};"/>
						</outline>
					<outline text="xml2js.parseString (xmltext.toString (), options, function (err, jstruct) {">
						<outline text="if (err) { ">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (jstruct == null) { //12/27/21 by DW" created="Mon, 27 Dec 2021 15:06:51 GMT">
								<outline text="let message = &quot;Internal error: xml2js.parseString returned null.&quot;;" created="Mon, 27 Dec 2021 15:07:32 GMT"/>
								<outline text="callback ({message});" created="Mon, 27 Dec 2021 15:07:32 GMT"/>
								<outline text="}" created="Mon, 27 Dec 2021 15:07:04 GMT"/>
								</outline>
							<outline text="else {" created="Mon, 27 Dec 2021 15:07:06 GMT">
								<outline text="function getChannelValue (name) {" created="Thu, 29 Sep 2022 16:19:23 GMT">
									<outline text="try { //10/2/22 by DW" created="Sun, 02 Oct 2022 11:47:28 GMT">
										<outline text="if (jstruct.rss.channel [name] === undefined) {" created="Thu, 29 Sep 2022 16:27:24 GMT">
											<outline text="return (undefined);" created="Thu, 29 Sep 2022 16:27:48 GMT"/>
											<outline text="}" created="Thu, 29 Sep 2022 16:27:39 GMT"/>
											</outline>
										<outline text="else {" created="Thu, 29 Sep 2022 16:27:40 GMT">
											<outline text="var val = jstruct.rss.channel [name];" created="Thu, 18 May 2023 14:23:59 GMT"/>
											<outline text="if (typeof val == &quot;object&quot;) { //5/18/23 by DW" created="Thu, 18 May 2023 14:26:59 GMT">
												<outline text="if (val [&quot;$&quot;] !== undefined) {" created="Thu, 18 May 2023 14:27:34 GMT">
													<outline text="val = val [&quot;$&quot;];" created="Thu, 18 May 2023 14:29:31 GMT"/>
													<outline text="}" created="Thu, 18 May 2023 14:27:55 GMT"/>
													</outline>
												<outline text="}" created="Thu, 18 May 2023 14:27:11 GMT"/>
												</outline>
											<outline text="return (val);" created="Thu, 29 Sep 2022 16:27:48 GMT"/>
											<outline text="}" created="Thu, 29 Sep 2022 16:27:41 GMT"/>
											</outline>
										<outline text="}" created="Sun, 02 Oct 2022 11:47:32 GMT"/>
										</outline>
									<outline text="catch (err) {" created="Sun, 02 Oct 2022 11:47:33 GMT">
										<outline text="return (undefined);" created="Thu, 29 Sep 2022 16:27:48 GMT"/>
										<outline text="}" created="Sun, 02 Oct 2022 11:47:38 GMT"/>
										</outline>
									<outline text="}" created="Thu, 29 Sep 2022 16:27:12 GMT"/>
									</outline>
								<outline text="let theFeed = {" created="Thu, 29 Sep 2022 16:19:23 GMT">
									<outline text="head: {" created="Thu, 29 Sep 2022 19:36:22 GMT">
										<outline text="title: getChannelValue (&quot;title&quot;),"/>
										<outline text="description: getChannelValue (&quot;description&quot;),"/>
										<outline text="pubDate: getChannelValue (&quot;pubDate&quot;),"/>
										<outline text="link: getChannelValue (&quot;link&quot;),"/>
										<outline text="language: getChannelValue (&quot;language&quot;),"/>
										<outline text="copyright: getChannelValue (&quot;copyright&quot;),"/>
										<outline text="generator: getChannelValue (&quot;generator&quot;),"/>
										<outline text="managingEditor: getChannelValue (&quot;managingEditor&quot;),"/>
										<outline text="webMaster: getChannelValue (&quot;webMaster&quot;),"/>
										<outline text="lastBuildDate: getChannelValue (&quot;lastBuildDate&quot;),"/>
										<outline text="category: getChannelValue (&quot;category&quot;),"/>
										<outline text="docs: getChannelValue (&quot;docs&quot;),"/>
										<outline text="cloud: getChannelValue (&quot;cloud&quot;) //5/18/23 by DW"/>
										<outline text="}," created="Thu, 29 Sep 2022 19:36:25 GMT"/>
										</outline>
									<outline text="items: []" created="Thu, 29 Sep 2022 16:19:52 GMT"/>
									<outline text="};" created="Thu, 29 Sep 2022 16:19:42 GMT"/>
									</outline>
								<outline text="callback (undefined, theFeed);" created="Thu, 29 Sep 2022 16:14:05 GMT"/>
								<outline text="}" created="Mon, 27 Dec 2021 15:07:08 GMT"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Thu, 29 Sep 2022 16:04:58 GMT"/>
					</outline>
				<outline text="" created="Thu, 29 Sep 2022 16:04:53 GMT"/>
				<outline text="function parseFeedString (theString, charset, callback, errMsgPrefix) {">
					<outline text="Changes" isComment="true">
						<outline text="1/29/19; 7:51:46 PM by DW">
							<outline text="Make sure the callback is only called once."/>
							</outline>
						<outline text="1/26/19; 1:25:55 PM by DW">
							<outline text="Wired off consoleMessage. This level shouldn't be doing the error reporting. "/>
							</outline>
						</outline>
					<outline text="var feedparser = new feedParser ();"/>
					<outline text="var theFeed = {">
						<outline text="head: new Object (),"/>
						<outline text="items: new Array ()"/>
						<outline text="};"/>
						</outline>
					<outline text="var flCalledBack = false; //1/29/19 by DW"/>
					<outline text="function consoleMessage (s) {">
						<outline text="if (errMsgPrefix !== undefined) {" isComment="true">
							<outline text="console.log (errMsgPrefix + &quot;, &quot; + s);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="if (charset !== undefined) {">
						<outline text="try {">
							<outline text="theString = iconv.decode (theString, charset); //4/18/18 by DW -- use iconv-lite"/>
							<outline text="" isComment="true"/>
							<outline text="var iconv = new Iconv (charset, &quot;UTF-8&quot;);" isComment="true"/>
							<outline text="theString = iconv.convert (theString).toString ();" isComment="true"/>
							<outline text="}"/>
							</outline>
						<outline text="catch (err) {">
							<outline text="consoleMessage (&quot;err.message == &quot; + err.message);"/>
							<outline text="if (callback !== undefined) { //1/26/19 by DW">
								<outline text="flCalledBack = true;"/>
								<outline text="callback (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text="var theStream = new stream.Readable;"/>
					<outline text="theStream.push (theString);"/>
					<outline text="theStream.push (null);"/>
					<outline text=""/>
					<outline text="feedparser.on (&quot;readable&quot;, function () {">
						<outline text="try {">
							<outline text="var item = this.read ();"/>
							<outline text="if (item !== null) {">
								<outline text="theFeed.items.push (item);"/>
								<outline text="for (var x in item.meta) {">
									<outline text="if (metaNames [x] !== undefined) {">
										<outline text="if (x == &quot;atom:link&quot;) {" created="Tue, 14 Jun 2022 16:11:58 GMT">
											<outline text="try {" created="Tue, 14 Jun 2022 16:15:34 GMT">
												<outline text="item.meta [x].forEach (function (link) {" created="Tue, 14 Jun 2022 16:15:34 GMT">
													<outline text="var rel = link [&quot;@&quot;].rel;" created="Tue, 14 Jun 2022 16:37:22 GMT"/>
													<outline text="if (rel == &quot;self&quot;) {" created="Tue, 14 Jun 2022 16:17:51 GMT">
														<outline text="theFeed.head.linkToSelf = link [&quot;@&quot;].href;" created="Tue, 14 Jun 2022 16:18:31 GMT"/>
														<outline text="}" created="Tue, 14 Jun 2022 16:18:07 GMT"/>
														</outline>
													<outline text="if (rel == &quot;search&quot;) {" isComment="true" created="Tue, 14 Jun 2022 16:17:51 GMT">
														<outline text="theFeed.head.linkToSearch = link [&quot;@&quot;].href;" created="Tue, 14 Jun 2022 16:18:31 GMT"/>
														<outline text="}" created="Tue, 14 Jun 2022 16:18:07 GMT"/>
														</outline>
													<outline text="});" created="Tue, 14 Jun 2022 16:15:49 GMT"/>
													</outline>
												<outline text="}" created="Tue, 14 Jun 2022 16:15:57 GMT"/>
												</outline>
											<outline text="catch (err) {" created="Tue, 14 Jun 2022 16:15:58 GMT">
												<outline text="}" created="Tue, 14 Jun 2022 16:16:01 GMT"/>
												</outline>
											<outline text="}" created="Tue, 14 Jun 2022 16:12:17 GMT"/>
											</outline>
										<outline text="else {" created="Tue, 14 Jun 2022 16:12:18 GMT">
											<outline text="theFeed.head [x] = item.meta [x];"/>
											<outline text="}" created="Tue, 14 Jun 2022 16:12:21 GMT"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="catch (err) {">
							<outline text="console.log (&quot;parseFeedString: err.message == &quot; + err.message);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="feedparser.on (&quot;error&quot;, function (err) {">
						<outline text="consoleMessage (&quot;err.message == &quot; + err.message);"/>
						<outline text="if (!flCalledBack) { //make sure the callback is only called once -- 1/29/19 by DW">
							<outline text="flCalledBack = true;"/>
							<outline text="if (callback !== undefined) {">
								<outline text="callback (err, theFeed);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="feedparser.on (&quot;end&quot;, function () {">
						<outline text="if (!flCalledBack) {">
							<outline text="flCalledBack = true;"/>
							<outline text="if (theFeed.items.length == 0) { //9/29/22 by DW" created="Thu, 29 Sep 2022 16:01:56 GMT">
								<outline text="workWithNoItemsFeed (theString, function (err, theNewFeed) {" created="Thu, 29 Sep 2022 16:02:33 GMT">
									<outline text="if (err) {" created="Thu, 29 Sep 2022 16:03:05 GMT">
										<outline text="if (callback !== undefined) {" created="Thu, 29 Sep 2022 16:04:11 GMT">
											<outline text="callback (err);" created="Thu, 29 Sep 2022 16:03:29 GMT"/>
											<outline text="}" created="Thu, 29 Sep 2022 16:04:12 GMT"/>
											</outline>
										<outline text="}" created="Thu, 29 Sep 2022 16:03:11 GMT"/>
										</outline>
									<outline text="else {" created="Thu, 29 Sep 2022 16:03:12 GMT">
										<outline text="if (callback !== undefined) {" created="Thu, 29 Sep 2022 16:04:11 GMT">
											<outline text="callback (undefined, theNewFeed);"/>
											<outline text="}" created="Thu, 29 Sep 2022 16:04:12 GMT"/>
											</outline>
										<outline text="}" created="Thu, 29 Sep 2022 16:03:14 GMT"/>
										</outline>
									<outline text="});" created="Thu, 29 Sep 2022 16:02:48 GMT"/>
									</outline>
								<outline text="}" created="Thu, 29 Sep 2022 16:02:05 GMT"/>
								</outline>
							<outline text="else {" created="Thu, 29 Sep 2022 16:03:48 GMT">
								<outline text="if (callback !== undefined) {">
									<outline text="callback (undefined, theFeed);"/>
									<outline text="}"/>
									</outline>
								<outline text="}" created="Thu, 29 Sep 2022 16:03:49 GMT"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text=""/>
					<outline text="if (charset !== undefined) {" isComment="true">
						<outline text="var iconv = new Iconv (charset, &quot;UTF-8&quot;);"/>
						<outline text="theStream = theStream.pipe (iconv);"/>
						<outline text="}"/>
						</outline>
					<outline text="theStream.pipe (feedparser);"/>
					<outline text="}"/>
					</outline>
				<outline text="function parseFeedUrl (feedUrl, timeOutSecs, callback) {">
					<outline text="var theRequest = {">
						<outline text="url: feedUrl, "/>
						<outline text="encoding: null,"/>
						<outline text="jar: true,"/>
						<outline text="gzip: true,"/>
						<outline text="maxRedirects: 5,"/>
						<outline text="headers: {">
							<outline text="&quot;User-Agent&quot;: myProductName + &quot; v&quot; + myVersion"/>
							<outline text="}"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="if (timeOutSecs !== undefined) {">
						<outline text="theRequest.timeout = timeOutSecs * 1000;"/>
						<outline text="}"/>
						</outline>
					<outline text="request (theRequest, function (err, response, theString) {">
						<outline text="if (err) {">
							<outline text="if (callback !== undefined) {">
								<outline text="var theErrorResponse = {">
									<outline text="statusCode: 400 //something like ENOTFOUND or ETIMEDOUT"/>
									<outline text="};"/>
									</outline>
								<outline text="callback (err, undefined, theErrorResponse);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (response.statusCode != 200) {">
								<outline text="if (callback !== undefined) {">
									<outline text="var theErrorResponse = {">
										<outline text="message: &quot;Error reading the feed, response.statusCode == &quot; + response.statusCode + &quot;.&quot;,"/>
										<outline text="statusCode: response.statusCode"/>
										<outline text="};"/>
										</outline>
									<outline text="callback (theErrorResponse, undefined, response);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="console.log (theString);" isComment="true"/>
								<outline text="parseFeedString (theString, getCharset (response), function (err, theFeed) {">
									<outline text="checkForCloud (feedUrl, theFeed); //4/30/19 by DW"/>
									<outline text="checkForNoneLengthEnclosures (theFeed); //5/14/19 by DW"/>
									<outline text="if (callback !== undefined) {">
										<outline text="callback (err, theFeed, response); //4/17/18 by DW -- pass err back to caller"/>
										<outline text="}"/>
										</outline>
									<outline text="}, myProductName + &quot;: feedUrl == &quot; + feedUrl);"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="readme.md">
				<outline text="### What is this?">
					<outline text="It's a &lt;a href=&quot;https://www.npmjs.com/package/davefeedread&quot;&gt;Node package&lt;/a&gt; that contains everything you need to read a feed. "/>
					<outline text="It builds on the &lt;a href=&quot;https://github.com/danmactough/node-feedparser&quot;&gt;feedParser package&lt;/a&gt;. It's simpler to call, no need to master &lt;a href=&quot;https://nodejs.org/api/stream.html#stream_stream&quot;&gt;streams&lt;/a&gt; or &lt;a href=&quot;https://www.npmjs.com/package/iconv&quot;&gt;iconv&lt;/a&gt;. "/>
					<outline text="You can also parse a string, so you can deal with files that contain feed data, not just feeds accessible over the web. Or the feed text could come from a database. "/>
					<outline text="Because we use feedParser, we handle all the formats and variability that it handles. "/>
					<outline text="It's an entry-level feed parser that will be useful to people who haven't mastered all of JavaScript. "/>
					</outline>
				<outline text="### Why?">
					<outline text="Sometimes you need to quickly read a feed and do something with it, and don't have time for a major project. This package is for those times. "/>
					<outline text="It also provides good sample code for more advanced feed reading projects. "/>
					</outline>
				<outline text="### Example code">
					<outline text="There are two very basic examples, one that parses a feed that it reads &lt;a href=&quot;https://github.com/scripting/feedRead/blob/master/examples/readurl/read.js&quot;&gt;over the web&lt;/a&gt;, and one that it reads from a &lt;a href=&quot;https://github.com/scripting/feedRead/blob/master/examples/readfile/read.js&quot;&gt;local file&lt;/a&gt;."/>
					<outline text="A third example is a realistic &lt;a href=&quot;https://github.com/scripting/feedRead/blob/master/examples/cloud/read.js&quot;&gt;feed polling app&lt;/a&gt;, it checks a feed every five minutes and writes the JSON structure out to a local disk. It automatically supports &lt;a href=&quot;https://en.blog.wordpress.com/2009/09/07/rss-in-the-clouds/&quot;&gt;rssCloud&lt;/a&gt;, so you get realtime updates if the feed supports that protocol, which is part of RSS 2.0. "/>
					</outline>
				</outline>
			<outline text="examples/readurl/read.js">
				<outline text="const fs = require (&quot;fs&quot;);"/>
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="const feedRead = require (&quot;davefeedread&quot;);" isComment="true"/>
				<outline text="const feedRead = require (&quot;../../feedread.js&quot;);"/>
				<outline text=""/>
				<outline text="const urlTestFeed = &quot;https://rss.firesky.tv?filter=from%3Aacarvin.bsky.social&quot;; //5/18/23 by DW" created="Sat, 05 Mar 2022 17:19:45 GMT"/>
				<outline text="const urlTestFeed = &quot;http://www.kenrockwell.com/rss.php&quot;;" isComment="true" created="Sat, 05 Mar 2022 17:19:45 GMT"/>
				<outline text="const urlTestFeed = &quot;https://blog.docuverse.com/feed/&quot;;" isComment="true" created="Sat, 05 Mar 2022 17:19:45 GMT"/>
				<outline text="const urlTestFeed = &quot;http://rss.nytimes.com/services/xml/rss/nyt/Technology.xml&quot;;" isComment="true"/>
				<outline text="const urlTestFeed = &quot;http://feeds.wnyc.org/radiolab&quot;;" isComment="true"/>
				<outline text="const urlTestFeed = &quot;https://www.presseportal.de/rss/dienststelle_110972.rss2&quot;;" isComment="true"/>
				<outline text="const urlTestFeed = &quot;http://scripting.com/rss.xml&quot;;" isComment="true"/>
				<outline text="const timeOutSecs = 30;"/>
				<outline text="const whenstart = new Date ();"/>
				<outline text=""/>
				<outline text="feedRead.parseUrl (urlTestFeed, timeOutSecs, function (err, theFeed) {">
					<outline text="if (err) {">
						<outline text="console.log (err.message);"/>
						<outline text="}"/>
						</outline>
					<outline text="else {">
						<outline text="console.log (&quot;It took &quot; + utils.secondsSince (whenstart) + &quot; seconds to read and parse the feed.&quot;);"/>
						<outline text=""/>
						<outline text="console.log (&quot;theFeed.head == &quot; + utils.jsonStringify (theFeed.head));"/>
						<outline text="if (theFeed.items.length &gt; 0) {" created="Thu, 18 May 2023 14:13:52 GMT">
							<outline text="var item = theFeed.items [0];"/>
							<outline text="var rssguid = item [&quot;rss:guid&quot;];"/>
							<outline text="console.log (&quot;rssguid == &quot; + utils.jsonStringify (rssguid));"/>
							<outline text="console.log (&quot;theFeed.items [0] == &quot; + utils.jsonStringify (theFeed.items [0]));"/>
							<outline text="theFeed.items.forEach (function (item, i) {">
								<outline text="var theLength = &quot;&quot;;" isComment="true"/>
								<outline text="if ((item.enclosures !== undefined) &amp;&amp; (item.enclosures.length &gt; 0)) {" isComment="true">
									<outline text="theLength = item.enclosures [0].length;"/>
									<outline text="if (theLength == &quot;None&quot;) {">
										<outline text="theLength = 0;"/>
										<outline text="}"/>
										</outline>
									<outline text="theLength = Number (theLength);"/>
									<outline text="}"/>
									</outline>
								<outline text="console.log (&quot;Item #&quot; + utils.padWithZeros (i, 3) + &quot;: &quot; + theLength);" isComment="true"/>
								<outline text="console.log (&quot;Item #&quot; + utils.padWithZeros (i, 2) + &quot;: &quot; + item.title + &quot;.&quot;);"/>
								<outline text="});"/>
								</outline>
							<outline text="}" created="Thu, 18 May 2023 14:13:58 GMT"/>
							</outline>
						<outline text=""/>
						<outline text="fs.writeFile (&quot;feed.xml&quot;, utils.jsonStringify (theFeed), function (err) {">
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="});"/>
					</outline>
				</outline>
			<outline text="examples/readurl/package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;example1&quot;,"/>
					<outline text="&quot;description&quot;: &quot;A test app for the davefeedread package, reads a feed from the NY Times website, parses it, and displays some of the information.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@smallpicture.com&gt;&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;davefeedread&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daveutils&quot;: &quot;*&quot;"/>
						<outline text="}, "/>
						</outline>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;engines&quot;: {">
						<outline text="&quot;node&quot;: &quot;*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="examples/readfile/read.js">
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="const feedRead = require (&quot;&quot;../../feedread.js&quot;);"/>
				<outline text="const feedRead = require (&quot;davefeedread&quot;);" isComment="true"/>
				<outline text="const fs = require (&quot;fs&quot;);"/>
				<outline text=""/>
				<outline text="fs.readFile (&quot;rss.xml&quot;, function (err, filetext) {">
					<outline text="if (err) {">
						<outline text="console.log (err.message);"/>
						<outline text="}"/>
						</outline>
					<outline text="else {">
						<outline text="console.log (filetext.toString ());" isComment="true"/>
						<outline text="feedRead.parseString (filetext, undefined, function (err, theFeed) {">
							<outline text="console.log (utils.jsonStringify (theFeed.head));"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="});"/>
					</outline>
				</outline>
			<outline text="examples/readfile/package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;example2&quot;,"/>
					<outline text="&quot;description&quot;: &quot;A test app for the davefeedread package, reads a feed from a local file.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@smallpicture.com&gt;&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;davefeedread&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daveutils&quot;: &quot;*&quot;"/>
						<outline text="}, "/>
						</outline>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;engines&quot;: {">
						<outline text="&quot;node&quot;: &quot;*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="examples/cloud/read.js">
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="const feedRead = require (&quot;davefeedread&quot;);"/>
				<outline text="const fs = require (&quot;fs&quot;);"/>
				<outline text=""/>
				<outline text="const urlTestFeed = &quot;http://scripting.com/rss.xml&quot;; //has to be a feed that supports rssCloud"/>
				<outline text="const timeOutSecs = 30;"/>
				<outline text="const fnameFeedJson = &quot;theFeed.json&quot;;"/>
				<outline text="var whenLastCheck;"/>
				<outline text=""/>
				<outline text="function checkFeed (feedUrl, callback) {">
					<outline text="whenLastCheck = new Date ();"/>
					<outline text="feedRead.parseUrl (feedUrl, timeOutSecs, function (err, theFeed) {">
						<outline text="if (err) {">
							<outline text="console.log (&quot;checkFeed: err.message == &quot; + err.message);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="var nowstring = new Date ().toLocaleTimeString ();"/>
							<outline text="console.log (nowstring + &quot;: The title of the feed is \&quot;&quot; + theFeed.head.title + &quot;,\&quot; there are &quot; + theFeed.items.length + &quot; items in the feed.&quot;);"/>
							<outline text="fs.writeFile (fnameFeedJson, utils.jsonStringify (theFeed), function (err) { //write out the object so you have something to study">
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="if (callback !== undefined) {">
							<outline text="callback ();"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function everySecond () {">
					<outline text="if (utils.secondsSince (whenLastCheck) &gt; 5 * 60) { //five minutes between polls">
						<outline text="checkFeed (urlTestFeed);"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="const options = {">
					<outline text="port: 1415,"/>
					<outline text="feedUpdatedCallback: checkFeed"/>
					<outline text="};"/>
					</outline>
				<outline text="feedRead.startCloud (options, function () {">
					<outline text="checkFeed (urlTestFeed);"/>
					<outline text="setInterval (everySecond, 1000); "/>
					<outline text="});"/>
					</outline>
				</outline>
			<outline text="examples/cloud/package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;cloudread&quot;,"/>
					<outline text="&quot;description&quot;: &quot;A test app for the davefeedread package, reads a feed that has rssCloud support, handles realtime updates.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@smallpicture.com&gt;&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;davefeedread&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daveutils&quot;: &quot;*&quot;"/>
						<outline text="}, "/>
						</outline>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;engines&quot;: {">
						<outline text="&quot;node&quot;: &quot;*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="test0.js" isComment="true">
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="const feedReader = require (&quot;./reader2.js&quot;);"/>
				<outline text="const request = require (&quot;request&quot;);"/>
				<outline text=""/>
				<outline text="const urlTestFeed = &quot;http://www.guardian.co.uk/world/usa/rss&quot;;" isComment="true"/>
				<outline text="const urlTestFeed = &quot;https://www.presseportal.de/rss/dienststelle_110972.rss2&quot;;"/>
				<outline text="console.log (&quot;\n&quot; + myProductName + &quot; v&quot; + myVersion + &quot;.\n&quot;); " isComment="true"/>
				<outline text=""/>
				<outline text="var whenstart = new Date ();"/>
				<outline text="feedReader.parseUrl (urlTestFeed, undefined, function (err, theFeed) {">
					<outline text="console.log (theFeed.items.length);"/>
					<outline text="console.log (utils.secondsSince (whenstart));"/>
					<outline text="console.log (utils.jsonStringify (theFeed.head));"/>
					<outline text="});"/>
					</outline>
				<outline text=""/>
				<outline text="request ({url: urlTestFeed, encoding: null}, function (error, response, theString) {" isComment="true">
					<outline text="var whenstart = new Date ();"/>
					<outline text="feedReader.parseString (theString, &quot;ISO-8859-1&quot;, function (err, theFeed) {">
						<outline text="console.log (theFeed.items.length);"/>
						<outline text="console.log (utils.secondsSince (whenstart));"/>
						<outline text="console.log (utils.jsonStringify (theFeed.head));"/>
						<outline text="console.log (utils.jsonStringify (theFeed.items [0].meta));" isComment="true"/>
						<outline text="function pad (num) { " created="Thu, 06 Jun 2013 19:04:01 GMT" pgfnum="25297">
							<outline text="var s = num.toString (), ctplaces = 3;" created="Thu, 06 Jun 2013 19:04:50 GMT" pgfnum="25301"/>
							<outline text="while (s.length &lt; ctplaces) {" created="Thu, 06 Jun 2013 19:04:23 GMT" pgfnum="25299">
								<outline text="s = &quot;0&quot; + s;" created="Thu, 06 Jun 2013 19:05:07 GMT" pgfnum="25302"/>
								<outline text="}" created="Thu, 06 Jun 2013 19:04:43 GMT" pgfnum="25300"/>
								</outline>
							<outline text="return (s);" created="Thu, 06 Jun 2013 19:12:58 GMT" pgfnum="25311"/>
							<outline text="}" created="Thu, 06 Jun 2013 19:04:11 GMT" pgfnum="25298"/>
							</outline>
						<outline text="console.log (&quot;There are &quot; + theFeed.items.length + &quot; items in the feed.\n&quot;);"/>
						<outline text="for (var i = 0; i &lt; theFeed.items.length; i++) {">
							<outline text="console.log (&quot;Item #&quot; + pad (i) + &quot;: &quot; + theFeed.items [i].title + &quot;.\n&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text=""/>
					<outline text=""/>
					<outline text=""/>
					<outline text="if (!error &amp;&amp; response.statusCode == 200) {" isComment="true">
						<outline text="console.log (utils.jsonStringify (response.headers));"/>
						<outline text="}"/>
						</outline>
					<outline text="else {" isComment="true">
						<outline text="}"/>
						</outline>
					<outline text="});"/>
					</outline>
				<outline text=""/>
				<outline text=""/>
				<outline text="feedReader.read (urlTestFeed, function (err, feedItems) {" isComment="true">
					<outline text="if (!err) {">
						<outline text="function pad (num) { " created="Thu, 06 Jun 2013 19:04:01 GMT" pgfnum="25297">
							<outline text="var s = num.toString (), ctplaces = 3;" created="Thu, 06 Jun 2013 19:04:50 GMT" pgfnum="25301"/>
							<outline text="while (s.length &lt; ctplaces) {" created="Thu, 06 Jun 2013 19:04:23 GMT" pgfnum="25299">
								<outline text="s = &quot;0&quot; + s;" created="Thu, 06 Jun 2013 19:05:07 GMT" pgfnum="25302"/>
								<outline text="}" created="Thu, 06 Jun 2013 19:04:43 GMT" pgfnum="25300"/>
								</outline>
							<outline text="return (s);" created="Thu, 06 Jun 2013 19:12:58 GMT" pgfnum="25311"/>
							<outline text="}" created="Thu, 06 Jun 2013 19:04:11 GMT" pgfnum="25298"/>
							</outline>
						<outline text="console.log (&quot;There are &quot; + feedItems.length + &quot; items in the feed.\n&quot;);"/>
						<outline text="for (var i = 0; i &lt; feedItems.length; i++) {">
							<outline text="console.log (&quot;Item #&quot; + pad (i) + &quot;: &quot; + feedItems [i].title + &quot;.\n&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="});"/>
					</outline>
				<outline text=""/>
				<outline text=""/>
				</outline>
			<outline text="testing/test.js" isComment="true">
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="const feedRead = require (&quot;davefeedread&quot;);"/>
				<outline text=""/>
				<outline text="const urlTestFeed = &quot;https://www.presseportal.de/rss/dienststelle_110972.rss2&quot;;" isComment="true"/>
				<outline text="const urlTestFeed = &quot;http://scripting.com/rss.xml&quot;;"/>
				<outline text="const whenstart = new Date ();"/>
				<outline text=""/>
				<outline text="feedRead.parseUrl (urlTestFeed, undefined, function (err, theFeed) {">
					<outline text="if (!err) {">
						<outline text="console.log (&quot;It took &quot; + utils.secondsSince (whenstart) + &quot; seconds to read and parse the feed.&quot;);"/>
						<outline text="console.log (&quot;theFeed.head == &quot; + utils.jsonStringify (theFeed.head));"/>
						<outline text="console.log (&quot;theFeed.items [0] == &quot; + utils.jsonStringify (theFeed.items [0]));"/>
						<outline text="for (var i = 0; i &lt; theFeed.items.length; i++) {">
							<outline text="console.log (&quot;Item #&quot; + utils.padWithZeros (i, 2) + &quot;: &quot; + theFeed.items [i].title + &quot;.&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="});"/>
					</outline>
				</outline>
			<outline text="testing/package.json" isComment="true">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;test&quot;,"/>
					<outline text="&quot;description&quot;: &quot;A test app for the davefeedread package.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@smallpicture.com&gt;&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;davefeedread&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daveutils&quot;: &quot;*&quot;"/>
						<outline text="}, "/>
						</outline>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;engines&quot;: {">
						<outline text="&quot;node&quot;: &quot;*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			</outline>
		<outline text="/scripting.com/code/testing/iconvlite/">
			<outline text="feedread.js">
				<outline text="[[http://scripting.com/code/feedread/feedread.js]]"/>
				</outline>
			<outline text="package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;iconvlitetest&quot;,"/>
					<outline text="&quot;description&quot;: &quot;Test the iconv-lite package.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@smallpicture.com&gt;&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.11&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;request&quot;: &quot;*&quot;,"/>
						<outline text="&quot;iconv-lite&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;feedparser&quot;: &quot;*&quot;"/>
						<outline text="}, "/>
						</outline>
					<outline text="&quot;repository&quot;: {">
						<outline text="&quot;type&quot;: &quot;git&quot;,"/>
						<outline text="&quot;url&quot;: &quot;https://github.com/scripting/feedread.git&quot;"/>
						<outline text="},"/>
						</outline>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;engines&quot;: {">
						<outline text="&quot;node&quot;: &quot;*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="test.js">
				<outline text="const iconv = require (&quot;iconv-lite&quot;);"/>
				<outline text="const request = require (&quot;request&quot;);"/>
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text=""/>
				<outline text="var feedUrl = &quot;https://www.presseportal.de/rss/dienststelle_110972.rss2&quot;;"/>
				<outline text=""/>
				<outline text="function getCharset (httpResponse) {">
					<outline text="var contentType = httpResponse.headers [&quot;content-type&quot;];"/>
					<outline text="if (contentType !== undefined) {">
						<outline text="var encoding = utils.trimWhitespace (utils.stringNthField (contentType, &quot;;&quot;, 2));"/>
						<outline text="if (encoding.length &gt; 0) {">
							<outline text="var charset = utils.trimWhitespace (utils.stringNthField (encoding, &quot;=&quot;, 2));"/>
							<outline text="console.log (&quot;getCharset: charset == &quot; + charset);" isComment="true"/>
							<outline text="return (charset);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="return (undefined); //no charset specified"/>
					<outline text="}"/>
					</outline>
				<outline text="var options = { ">
					<outline text="url: feedUrl,"/>
					<outline text="encoding: null"/>
					<outline text="};"/>
					</outline>
				<outline text="request (options, function (err, response, theBuffer) {">
					<outline text="if (err) {">
						<outline text="console.log (err.message);"/>
						<outline text="}"/>
						</outline>
					<outline text="else {">
						<outline text="if (response.statusCode != 200) {">
							<outline text="console.log (response.statusCode);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="var theCharset = getCharset (response);"/>
							<outline text="console.log (theCharset);"/>
							<outline text="var theBuffer = Buffer.from (theString, &quot;utf8&quot;);" isComment="true"/>
							<outline text="var s = iconv.decode (theBuffer, theCharset);"/>
							<outline text="console.log (s);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="});"/>
					</outline>
				</outline>
			<outline text="test2.js">
				<outline text="const feedRead = require (&quot;./feedread.js&quot;);"/>
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text=""/>
				<outline text="var feedUrl = &quot;https://www.presseportal.de/rss/dienststelle_110972.rss2&quot;;"/>
				<outline text=""/>
				<outline text="feedRead.parseUrl (feedUrl, undefined, function (err, theFeed, httpResponse) {">
					<outline text="if (err) {">
						<outline text="console.log (err.message);"/>
						<outline text="}"/>
						</outline>
					<outline text="else {">
						<outline text="console.log (utils.jsonStringify (theFeed.head));"/>
						<outline text="}"/>
						</outline>
					<outline text="});"/>
					</outline>
				</outline>
			</outline>
		<outline text="build script">
			<outline text="nodeEditorSuite.utilities.buildFeedRead ()"/>
			</outline>
		</body>
	</opml>
